{
  "version": 3,
  "sources": ["../../../app/routes/test-api.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/test-api.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/test-api.tsx\");\n  import.meta.hot.lastModified = \"1732681692797.3796\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nexport async function loader() {\n  try {\n    // Make a direct fetch to the API without using our client\n    const response = await fetch('https://directus.meineapp.uk/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `\n          query TestQuery {\n            Produkte {\n              Produkttitel\n              Slug\n              Preis\n            }\n          }\n        `\n      })\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`API request failed: ${response.status} ${response.statusText}\\n${errorText}`);\n    }\n    const data = await response.json();\n    return json({\n      success: true,\n      responseStatus: response.status,\n      responseHeaders: Object.fromEntries(response.headers.entries()),\n      data\n    });\n  } catch (error) {\n    console.error('API Test Error:', error);\n    return json({\n      success: false,\n      error: error.message,\n      errorStack: error.stack\n    }, {\n      status: 500\n    });\n  }\n}\nexport default function TestApi() {\n  _s();\n  const data = useLoaderData();\n  return <div className=\"p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">API Test Results</h1>\n      \n      {data.success ? <>\n          <h2 className=\"text-xl font-semibold mb-2\">Response Status: {data.responseStatus}</h2>\n          <h3 className=\"text-lg font-semibold mb-2\">Response Headers:</h3>\n          <pre className=\"bg-gray-100 p-4 rounded mb-4\">\n            {JSON.stringify(data.responseHeaders, null, 2)}\n          </pre>\n          <h3 className=\"text-lg font-semibold mb-2\">Data:</h3>\n          <pre className=\"bg-gray-100 p-4 rounded\">\n            {JSON.stringify(data.data, null, 2)}\n          </pre>\n        </> : <div className=\"text-red-600\">\n          <h2 className=\"text-xl font-semibold mb-2\">Error:</h2>\n          <pre className=\"bg-red-50 p-4 rounded mb-4\">\n            {data.error}\n          </pre>\n          <h3 className=\"text-lg font-semibold mb-2\">Stack Trace:</h3>\n          <pre className=\"bg-red-50 p-4 rounded text-sm\">\n            {data.errorStack}\n          </pre>\n        </div>}\n    </div>;\n}\n_s(TestApi, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = TestApi;\nvar _c;\n$RefreshReg$(_c, \"TestApi\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAqBA,kBAAqB;AAgDf;AApEN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,8BAAgC,EAAE;AAAA,EAC3E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAyB;AACzB,cAAY,IAAI,eAAe;AACjC;AA+Ce,SAAR,UAA2B;AAChC,KAAG;AACH,QAAM,OAAO,cAAc;AAC3B,SAAO,mDAAC,SAAI,WAAU,OAClB;AAAA,uDAAC,QAAG,WAAU,2BAA0B,gCAAxC;AAAA;AAAA;AAAA;AAAA,WAAwD;AAAA,IAEvD,KAAK,UAAU,sFACZ;AAAA,yDAAC,QAAG,WAAU,8BAA6B;AAAA;AAAA,QAAkB,KAAK;AAAA,WAAlE;AAAA;AAAA;AAAA;AAAA,aAAiF;AAAA,MACjF,mDAAC,QAAG,WAAU,8BAA6B,iCAA3C;AAAA;AAAA;AAAA;AAAA,aAA4D;AAAA,MAC5D,mDAAC,SAAI,WAAU,gCACZ,eAAK,UAAU,KAAK,iBAAiB,MAAM,CAAC,KAD/C;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,QAAG,WAAU,8BAA6B,qBAA3C;AAAA;AAAA;AAAA;AAAA,aAAgD;AAAA,MAChD,mDAAC,SAAI,WAAU,2BACZ,eAAK,UAAU,KAAK,MAAM,MAAM,CAAC,KADpC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SATY;AAAA;AAAA;AAAA;AAAA,WAUd,IAAM,mDAAC,SAAI,WAAU,gBACnB;AAAA,yDAAC,QAAG,WAAU,8BAA6B,sBAA3C;AAAA;AAAA;AAAA;AAAA,aAAiD;AAAA,MACjD,mDAAC,SAAI,WAAU,8BACZ,eAAK,SADR;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,QAAG,WAAU,8BAA6B,4BAA3C;AAAA;AAAA;AAAA;AAAA,aAAuD;AAAA,MACvD,mDAAC,SAAI,WAAU,iCACZ,eAAK,cADR;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SARI;AAAA;AAAA;AAAA;AAAA,WASN;AAAA,OAtBC;AAAA;AAAA;AAAA;AAAA,SAuBL;AACJ;AACA,GAAG,SAAS,gCAAgC,OAAO,WAAY;AAC7D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,SAAS;AAE1B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
